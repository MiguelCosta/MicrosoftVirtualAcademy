// ----------------------------------------------------------------------------------
// Microsoft Developer & Platform Evangelism
// 
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
// THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
// EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
// OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
// ----------------------------------------------------------------------------------
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
// ----------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18331
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Expenses.ExpenseRepository.WcfClient.WcfExpenseService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/Expenses.WcfService.ServiceCore")]
    public partial class Employee : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int EmployeeIdField;
        
        private string NameField;
        
        private string AliasField;
        
        private string ManagerField;
        
        private Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[] ChargesField;
        
        private Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] ExpenseReportsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmployeeId {
            get {
                return this.EmployeeIdField;
            }
            set {
                if ((this.EmployeeIdField.Equals(value) != true)) {
                    this.EmployeeIdField = value;
                    this.RaisePropertyChanged("EmployeeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Alias {
            get {
                return this.AliasField;
            }
            set {
                if ((object.ReferenceEquals(this.AliasField, value) != true)) {
                    this.AliasField = value;
                    this.RaisePropertyChanged("Alias");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string Manager {
            get {
                return this.ManagerField;
            }
            set {
                if ((object.ReferenceEquals(this.ManagerField, value) != true)) {
                    this.ManagerField = value;
                    this.RaisePropertyChanged("Manager");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[] Charges {
            get {
                return this.ChargesField;
            }
            set {
                if ((object.ReferenceEquals(this.ChargesField, value) != true)) {
                    this.ChargesField = value;
                    this.RaisePropertyChanged("Charges");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] ExpenseReports {
            get {
                return this.ExpenseReportsField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpenseReportsField, value) != true)) {
                    this.ExpenseReportsField = value;
                    this.RaisePropertyChanged("ExpenseReports");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Charge", Namespace="http://schemas.datacontract.org/2004/07/Expenses.WcfService.ServiceCore")]
    public partial class Charge : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ChargeIdField;
        
        private int EmployeeIdField;
        
        private System.Nullable<int> ExpenseReportIdField;
        
        private System.DateTime ExpenseDateField;
        
        private string MerchantField;
        
        private string LocationField;
        
        private decimal BilledAmountField;
        
        private decimal TransactionAmountField;
        
        private string DescriptionField;
        
        private int CategoryField;
        
        private int AccountNumberField;
        
        private bool ReceiptRequiredField;
        
        private string NotesField;
        
        private int ExpenseTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChargeId {
            get {
                return this.ChargeIdField;
            }
            set {
                if ((this.ChargeIdField.Equals(value) != true)) {
                    this.ChargeIdField = value;
                    this.RaisePropertyChanged("ChargeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmployeeId {
            get {
                return this.EmployeeIdField;
            }
            set {
                if ((this.EmployeeIdField.Equals(value) != true)) {
                    this.EmployeeIdField = value;
                    this.RaisePropertyChanged("EmployeeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ExpenseReportId {
            get {
                return this.ExpenseReportIdField;
            }
            set {
                if ((this.ExpenseReportIdField.Equals(value) != true)) {
                    this.ExpenseReportIdField = value;
                    this.RaisePropertyChanged("ExpenseReportId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public System.DateTime ExpenseDate {
            get {
                return this.ExpenseDateField;
            }
            set {
                if ((this.ExpenseDateField.Equals(value) != true)) {
                    this.ExpenseDateField = value;
                    this.RaisePropertyChanged("ExpenseDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string Merchant {
            get {
                return this.MerchantField;
            }
            set {
                if ((object.ReferenceEquals(this.MerchantField, value) != true)) {
                    this.MerchantField = value;
                    this.RaisePropertyChanged("Merchant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public decimal BilledAmount {
            get {
                return this.BilledAmountField;
            }
            set {
                if ((this.BilledAmountField.Equals(value) != true)) {
                    this.BilledAmountField = value;
                    this.RaisePropertyChanged("BilledAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public decimal TransactionAmount {
            get {
                return this.TransactionAmountField;
            }
            set {
                if ((this.TransactionAmountField.Equals(value) != true)) {
                    this.TransactionAmountField = value;
                    this.RaisePropertyChanged("TransactionAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public int Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((this.CategoryField.Equals(value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public int AccountNumber {
            get {
                return this.AccountNumberField;
            }
            set {
                if ((this.AccountNumberField.Equals(value) != true)) {
                    this.AccountNumberField = value;
                    this.RaisePropertyChanged("AccountNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public bool ReceiptRequired {
            get {
                return this.ReceiptRequiredField;
            }
            set {
                if ((this.ReceiptRequiredField.Equals(value) != true)) {
                    this.ReceiptRequiredField = value;
                    this.RaisePropertyChanged("ReceiptRequired");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=12)]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=13)]
        public int ExpenseType {
            get {
                return this.ExpenseTypeField;
            }
            set {
                if ((this.ExpenseTypeField.Equals(value) != true)) {
                    this.ExpenseTypeField = value;
                    this.RaisePropertyChanged("ExpenseType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExpenseReport", Namespace="http://schemas.datacontract.org/2004/07/Expenses.WcfService.ServiceCore")]
    public partial class ExpenseReport : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ExpenseReportIdField;
        
        private int EmployeeIdField;
        
        private decimal AmountField;
        
        private string PurposeField;
        
        private string ApproverField;
        
        private int CostCenterField;
        
        private string NotesField;
        
        private System.Nullable<System.DateTime> DateSubmittedField;
        
        private int StatusField;
        
        private System.Nullable<System.DateTime> DateResolvedField;
        
        private decimal OwedToCreditCardField;
        
        private decimal OwedToEmployeeField;
        
        private System.Nullable<System.DateTime> DateSavedField;
        
        private Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[] ChargesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExpenseReportId {
            get {
                return this.ExpenseReportIdField;
            }
            set {
                if ((this.ExpenseReportIdField.Equals(value) != true)) {
                    this.ExpenseReportIdField = value;
                    this.RaisePropertyChanged("ExpenseReportId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int EmployeeId {
            get {
                return this.EmployeeIdField;
            }
            set {
                if ((this.EmployeeIdField.Equals(value) != true)) {
                    this.EmployeeIdField = value;
                    this.RaisePropertyChanged("EmployeeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public decimal Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string Purpose {
            get {
                return this.PurposeField;
            }
            set {
                if ((object.ReferenceEquals(this.PurposeField, value) != true)) {
                    this.PurposeField = value;
                    this.RaisePropertyChanged("Purpose");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string Approver {
            get {
                return this.ApproverField;
            }
            set {
                if ((object.ReferenceEquals(this.ApproverField, value) != true)) {
                    this.ApproverField = value;
                    this.RaisePropertyChanged("Approver");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public int CostCenter {
            get {
                return this.CostCenterField;
            }
            set {
                if ((this.CostCenterField.Equals(value) != true)) {
                    this.CostCenterField = value;
                    this.RaisePropertyChanged("CostCenter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public System.Nullable<System.DateTime> DateSubmitted {
            get {
                return this.DateSubmittedField;
            }
            set {
                if ((this.DateSubmittedField.Equals(value) != true)) {
                    this.DateSubmittedField = value;
                    this.RaisePropertyChanged("DateSubmitted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public int Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public System.Nullable<System.DateTime> DateResolved {
            get {
                return this.DateResolvedField;
            }
            set {
                if ((this.DateResolvedField.Equals(value) != true)) {
                    this.DateResolvedField = value;
                    this.RaisePropertyChanged("DateResolved");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public decimal OwedToCreditCard {
            get {
                return this.OwedToCreditCardField;
            }
            set {
                if ((this.OwedToCreditCardField.Equals(value) != true)) {
                    this.OwedToCreditCardField = value;
                    this.RaisePropertyChanged("OwedToCreditCard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public decimal OwedToEmployee {
            get {
                return this.OwedToEmployeeField;
            }
            set {
                if ((this.OwedToEmployeeField.Equals(value) != true)) {
                    this.OwedToEmployeeField = value;
                    this.RaisePropertyChanged("OwedToEmployee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=12)]
        public System.Nullable<System.DateTime> DateSaved {
            get {
                return this.DateSavedField;
            }
            set {
                if ((this.DateSavedField.Equals(value) != true)) {
                    this.DateSavedField = value;
                    this.RaisePropertyChanged("DateSaved");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=13)]
        public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[] Charges {
            get {
                return this.ChargesField;
            }
            set {
                if ((object.ReferenceEquals(this.ChargesField, value) != true)) {
                    this.ChargesField = value;
                    this.RaisePropertyChanged("Charges");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SummaryItem", Namespace="http://schemas.datacontract.org/2004/07/Expenses.WcfService.ServiceCore")]
    public partial class SummaryItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<decimal> AmountField;
        
        private System.Nullable<System.DateTime> DateField;
        
        private string DescriptionField;
        
        private int IdField;
        
        private Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ItemType ItemTypeField;
        
        private string SubmitterField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ItemType ItemType {
            get {
                return this.ItemTypeField;
            }
            set {
                if ((this.ItemTypeField.Equals(value) != true)) {
                    this.ItemTypeField = value;
                    this.RaisePropertyChanged("ItemType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Submitter {
            get {
                return this.SubmitterField;
            }
            set {
                if ((object.ReferenceEquals(this.SubmitterField, value) != true)) {
                    this.SubmitterField = value;
                    this.RaisePropertyChanged("Submitter");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemType", Namespace="http://schemas.datacontract.org/2004/07/Expenses.WcfService.ServiceCore")]
    public enum ItemType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Charge = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SavedReport = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PendingReport = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnresolvedReport = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ApprovedReport = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExpenseReportStatus", Namespace="http://schemas.datacontract.org/2004/07/Expenses.WcfService.ServiceCore")]
    public enum ExpenseReportStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Saved = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pending = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Approved = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Canceled = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rejected = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfExpenseService.IExpenseService")]
    public interface IExpenseService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExpenseService/GetEmployee", ReplyAction="http://tempuri.org/IExpenseService/GetEmployeeResponse")]
        System.IAsyncResult BeginGetEmployee(string employeeAlias, System.AsyncCallback callback, object asyncState);
        
        Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Employee EndGetEmployee(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExpenseService/SaveEmployee", ReplyAction="http://tempuri.org/IExpenseService/SaveEmployeeResponse")]
        System.IAsyncResult BeginSaveEmployee(Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Employee employee, System.AsyncCallback callback, object asyncState);
        
        int EndSaveEmployee(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExpenseService/GetSummaryItems", ReplyAction="http://tempuri.org/IExpenseService/GetSummaryItemsResponse")]
        System.IAsyncResult BeginGetSummaryItems(int employeeId, System.AsyncCallback callback, object asyncState);
        
        Expenses.ExpenseRepository.WcfClient.WcfExpenseService.SummaryItem[] EndGetSummaryItems(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExpenseService/GetExpenseReport", ReplyAction="http://tempuri.org/IExpenseService/GetExpenseReportResponse")]
        System.IAsyncResult BeginGetExpenseReport(int expenseReportId, System.AsyncCallback callback, object asyncState);
        
        Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport EndGetExpenseReport(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExpenseService/GetExpenseReportsForApproval", ReplyAction="http://tempuri.org/IExpenseService/GetExpenseReportsForApprovalResponse")]
        System.IAsyncResult BeginGetExpenseReportsForApproval(string employeeAlias, System.AsyncCallback callback, object asyncState);
        
        Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] EndGetExpenseReportsForApproval(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExpenseService/GetExpenseReports", ReplyAction="http://tempuri.org/IExpenseService/GetExpenseReportsResponse")]
        System.IAsyncResult BeginGetExpenseReports(int employeeId, System.AsyncCallback callback, object asyncState);
        
        Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] EndGetExpenseReports(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExpenseService/GetExpenseReportsByStatus", ReplyAction="http://tempuri.org/IExpenseService/GetExpenseReportsByStatusResponse")]
        System.IAsyncResult BeginGetExpenseReportsByStatus(int employeeId, Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReportStatus status, System.AsyncCallback callback, object asyncState);
        
        Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] EndGetExpenseReportsByStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExpenseService/GetCharges", ReplyAction="http://tempuri.org/IExpenseService/GetChargesResponse")]
        System.IAsyncResult BeginGetCharges(int expenseReportId, System.AsyncCallback callback, object asyncState);
        
        Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[] EndGetCharges(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExpenseService/GetCharge", ReplyAction="http://tempuri.org/IExpenseService/GetChargeResponse")]
        System.IAsyncResult BeginGetCharge(int chargeId, System.AsyncCallback callback, object asyncState);
        
        Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge EndGetCharge(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExpenseService/GetOutstandingCharges", ReplyAction="http://tempuri.org/IExpenseService/GetOutstandingChargesResponse")]
        System.IAsyncResult BeginGetOutstandingCharges(int employeeId, System.AsyncCallback callback, object asyncState);
        
        Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[] EndGetOutstandingCharges(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExpenseService/GetAmountOwedToCreditCard", ReplyAction="http://tempuri.org/IExpenseService/GetAmountOwedToCreditCardResponse")]
        System.IAsyncResult BeginGetAmountOwedToCreditCard(int employeeId, System.AsyncCallback callback, object asyncState);
        
        decimal EndGetAmountOwedToCreditCard(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExpenseService/GetAmountOwedToEmployee", ReplyAction="http://tempuri.org/IExpenseService/GetAmountOwedToEmployeeResponse")]
        System.IAsyncResult BeginGetAmountOwedToEmployee(int employeeId, System.AsyncCallback callback, object asyncState);
        
        decimal EndGetAmountOwedToEmployee(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExpenseService/SaveCharge", ReplyAction="http://tempuri.org/IExpenseService/SaveChargeResponse")]
        System.IAsyncResult BeginSaveCharge(Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge charge, System.AsyncCallback callback, object asyncState);
        
        int EndSaveCharge(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExpenseService/DeleteCharge", ReplyAction="http://tempuri.org/IExpenseService/DeleteChargeResponse")]
        System.IAsyncResult BeginDeleteCharge(int chargeId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteCharge(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExpenseService/SaveExpenseReport", ReplyAction="http://tempuri.org/IExpenseService/SaveExpenseReportResponse")]
        System.IAsyncResult BeginSaveExpenseReport(Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport expenseReport, System.AsyncCallback callback, object asyncState);
        
        int EndSaveExpenseReport(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExpenseService/DeleteExpenseReport", ReplyAction="http://tempuri.org/IExpenseService/DeleteExpenseReportResponse")]
        System.IAsyncResult BeginDeleteExpenseReport(int expenseReportId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteExpenseReport(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExpenseService/ResetData", ReplyAction="http://tempuri.org/IExpenseService/ResetDataResponse")]
        System.IAsyncResult BeginResetData(System.AsyncCallback callback, object asyncState);
        
        void EndResetData(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExpenseServiceChannel : Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Employee Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Employee)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSummaryItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSummaryItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.SummaryItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.SummaryItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetExpenseReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetExpenseReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetExpenseReportsForApprovalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetExpenseReportsForApprovalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetExpenseReportsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetExpenseReportsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetExpenseReportsByStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetExpenseReportsByStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetChargesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetChargesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetChargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetChargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOutstandingChargesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOutstandingChargesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAmountOwedToCreditCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAmountOwedToCreditCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public decimal Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAmountOwedToEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAmountOwedToEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public decimal Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveChargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveChargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveExpenseReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveExpenseReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExpenseServiceClient : System.ServiceModel.ClientBase<Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService>, Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService {
        
        private BeginOperationDelegate onBeginGetEmployeeDelegate;
        
        private EndOperationDelegate onEndGetEmployeeDelegate;
        
        private System.Threading.SendOrPostCallback onGetEmployeeCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveEmployeeDelegate;
        
        private EndOperationDelegate onEndSaveEmployeeDelegate;
        
        private System.Threading.SendOrPostCallback onSaveEmployeeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSummaryItemsDelegate;
        
        private EndOperationDelegate onEndGetSummaryItemsDelegate;
        
        private System.Threading.SendOrPostCallback onGetSummaryItemsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetExpenseReportDelegate;
        
        private EndOperationDelegate onEndGetExpenseReportDelegate;
        
        private System.Threading.SendOrPostCallback onGetExpenseReportCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetExpenseReportsForApprovalDelegate;
        
        private EndOperationDelegate onEndGetExpenseReportsForApprovalDelegate;
        
        private System.Threading.SendOrPostCallback onGetExpenseReportsForApprovalCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetExpenseReportsDelegate;
        
        private EndOperationDelegate onEndGetExpenseReportsDelegate;
        
        private System.Threading.SendOrPostCallback onGetExpenseReportsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetExpenseReportsByStatusDelegate;
        
        private EndOperationDelegate onEndGetExpenseReportsByStatusDelegate;
        
        private System.Threading.SendOrPostCallback onGetExpenseReportsByStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetChargesDelegate;
        
        private EndOperationDelegate onEndGetChargesDelegate;
        
        private System.Threading.SendOrPostCallback onGetChargesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetChargeDelegate;
        
        private EndOperationDelegate onEndGetChargeDelegate;
        
        private System.Threading.SendOrPostCallback onGetChargeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOutstandingChargesDelegate;
        
        private EndOperationDelegate onEndGetOutstandingChargesDelegate;
        
        private System.Threading.SendOrPostCallback onGetOutstandingChargesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAmountOwedToCreditCardDelegate;
        
        private EndOperationDelegate onEndGetAmountOwedToCreditCardDelegate;
        
        private System.Threading.SendOrPostCallback onGetAmountOwedToCreditCardCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAmountOwedToEmployeeDelegate;
        
        private EndOperationDelegate onEndGetAmountOwedToEmployeeDelegate;
        
        private System.Threading.SendOrPostCallback onGetAmountOwedToEmployeeCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveChargeDelegate;
        
        private EndOperationDelegate onEndSaveChargeDelegate;
        
        private System.Threading.SendOrPostCallback onSaveChargeCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteChargeDelegate;
        
        private EndOperationDelegate onEndDeleteChargeDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteChargeCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveExpenseReportDelegate;
        
        private EndOperationDelegate onEndSaveExpenseReportDelegate;
        
        private System.Threading.SendOrPostCallback onSaveExpenseReportCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteExpenseReportDelegate;
        
        private EndOperationDelegate onEndDeleteExpenseReportDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteExpenseReportCompletedDelegate;
        
        private BeginOperationDelegate onBeginResetDataDelegate;
        
        private EndOperationDelegate onEndResetDataDelegate;
        
        private System.Threading.SendOrPostCallback onResetDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ExpenseServiceClient() : 
                base(ExpenseServiceClient.GetDefaultBinding(), ExpenseServiceClient.GetDefaultEndpointAddress()) {
        }
        
        public ExpenseServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ExpenseServiceClient.GetBindingForEndpoint(endpointConfiguration), ExpenseServiceClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public ExpenseServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ExpenseServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public ExpenseServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ExpenseServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public ExpenseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetEmployeeCompletedEventArgs> GetEmployeeCompleted;
        
        public event System.EventHandler<SaveEmployeeCompletedEventArgs> SaveEmployeeCompleted;
        
        public event System.EventHandler<GetSummaryItemsCompletedEventArgs> GetSummaryItemsCompleted;
        
        public event System.EventHandler<GetExpenseReportCompletedEventArgs> GetExpenseReportCompleted;
        
        public event System.EventHandler<GetExpenseReportsForApprovalCompletedEventArgs> GetExpenseReportsForApprovalCompleted;
        
        public event System.EventHandler<GetExpenseReportsCompletedEventArgs> GetExpenseReportsCompleted;
        
        public event System.EventHandler<GetExpenseReportsByStatusCompletedEventArgs> GetExpenseReportsByStatusCompleted;
        
        public event System.EventHandler<GetChargesCompletedEventArgs> GetChargesCompleted;
        
        public event System.EventHandler<GetChargeCompletedEventArgs> GetChargeCompleted;
        
        public event System.EventHandler<GetOutstandingChargesCompletedEventArgs> GetOutstandingChargesCompleted;
        
        public event System.EventHandler<GetAmountOwedToCreditCardCompletedEventArgs> GetAmountOwedToCreditCardCompleted;
        
        public event System.EventHandler<GetAmountOwedToEmployeeCompletedEventArgs> GetAmountOwedToEmployeeCompleted;
        
        public event System.EventHandler<SaveChargeCompletedEventArgs> SaveChargeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteChargeCompleted;
        
        public event System.EventHandler<SaveExpenseReportCompletedEventArgs> SaveExpenseReportCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteExpenseReportCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ResetDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.BeginGetEmployee(string employeeAlias, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEmployee(employeeAlias, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Employee Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.EndGetEmployee(System.IAsyncResult result) {
            return base.Channel.EndGetEmployee(result);
        }
        
        private System.IAsyncResult OnBeginGetEmployee(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string employeeAlias = ((string)(inValues[0]));
            return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).BeginGetEmployee(employeeAlias, callback, asyncState);
        }
        
        private object[] OnEndGetEmployee(System.IAsyncResult result) {
            Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Employee retVal = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).EndGetEmployee(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEmployeeCompleted(object state) {
            if ((this.GetEmployeeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEmployeeCompleted(this, new GetEmployeeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEmployeeAsync(string employeeAlias) {
            this.GetEmployeeAsync(employeeAlias, null);
        }
        
        public void GetEmployeeAsync(string employeeAlias, object userState) {
            if ((this.onBeginGetEmployeeDelegate == null)) {
                this.onBeginGetEmployeeDelegate = new BeginOperationDelegate(this.OnBeginGetEmployee);
            }
            if ((this.onEndGetEmployeeDelegate == null)) {
                this.onEndGetEmployeeDelegate = new EndOperationDelegate(this.OnEndGetEmployee);
            }
            if ((this.onGetEmployeeCompletedDelegate == null)) {
                this.onGetEmployeeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEmployeeCompleted);
            }
            base.InvokeAsync(this.onBeginGetEmployeeDelegate, new object[] {
                        employeeAlias}, this.onEndGetEmployeeDelegate, this.onGetEmployeeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.BeginSaveEmployee(Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Employee employee, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveEmployee(employee, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.EndSaveEmployee(System.IAsyncResult result) {
            return base.Channel.EndSaveEmployee(result);
        }
        
        private System.IAsyncResult OnBeginSaveEmployee(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Employee employee = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Employee)(inValues[0]));
            return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).BeginSaveEmployee(employee, callback, asyncState);
        }
        
        private object[] OnEndSaveEmployee(System.IAsyncResult result) {
            int retVal = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).EndSaveEmployee(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveEmployeeCompleted(object state) {
            if ((this.SaveEmployeeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveEmployeeCompleted(this, new SaveEmployeeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveEmployeeAsync(Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Employee employee) {
            this.SaveEmployeeAsync(employee, null);
        }
        
        public void SaveEmployeeAsync(Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Employee employee, object userState) {
            if ((this.onBeginSaveEmployeeDelegate == null)) {
                this.onBeginSaveEmployeeDelegate = new BeginOperationDelegate(this.OnBeginSaveEmployee);
            }
            if ((this.onEndSaveEmployeeDelegate == null)) {
                this.onEndSaveEmployeeDelegate = new EndOperationDelegate(this.OnEndSaveEmployee);
            }
            if ((this.onSaveEmployeeCompletedDelegate == null)) {
                this.onSaveEmployeeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveEmployeeCompleted);
            }
            base.InvokeAsync(this.onBeginSaveEmployeeDelegate, new object[] {
                        employee}, this.onEndSaveEmployeeDelegate, this.onSaveEmployeeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.BeginGetSummaryItems(int employeeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSummaryItems(employeeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Expenses.ExpenseRepository.WcfClient.WcfExpenseService.SummaryItem[] Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.EndGetSummaryItems(System.IAsyncResult result) {
            return base.Channel.EndGetSummaryItems(result);
        }
        
        private System.IAsyncResult OnBeginGetSummaryItems(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int employeeId = ((int)(inValues[0]));
            return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).BeginGetSummaryItems(employeeId, callback, asyncState);
        }
        
        private object[] OnEndGetSummaryItems(System.IAsyncResult result) {
            Expenses.ExpenseRepository.WcfClient.WcfExpenseService.SummaryItem[] retVal = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).EndGetSummaryItems(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSummaryItemsCompleted(object state) {
            if ((this.GetSummaryItemsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSummaryItemsCompleted(this, new GetSummaryItemsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSummaryItemsAsync(int employeeId) {
            this.GetSummaryItemsAsync(employeeId, null);
        }
        
        public void GetSummaryItemsAsync(int employeeId, object userState) {
            if ((this.onBeginGetSummaryItemsDelegate == null)) {
                this.onBeginGetSummaryItemsDelegate = new BeginOperationDelegate(this.OnBeginGetSummaryItems);
            }
            if ((this.onEndGetSummaryItemsDelegate == null)) {
                this.onEndGetSummaryItemsDelegate = new EndOperationDelegate(this.OnEndGetSummaryItems);
            }
            if ((this.onGetSummaryItemsCompletedDelegate == null)) {
                this.onGetSummaryItemsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSummaryItemsCompleted);
            }
            base.InvokeAsync(this.onBeginGetSummaryItemsDelegate, new object[] {
                        employeeId}, this.onEndGetSummaryItemsDelegate, this.onGetSummaryItemsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.BeginGetExpenseReport(int expenseReportId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetExpenseReport(expenseReportId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.EndGetExpenseReport(System.IAsyncResult result) {
            return base.Channel.EndGetExpenseReport(result);
        }
        
        private System.IAsyncResult OnBeginGetExpenseReport(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int expenseReportId = ((int)(inValues[0]));
            return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).BeginGetExpenseReport(expenseReportId, callback, asyncState);
        }
        
        private object[] OnEndGetExpenseReport(System.IAsyncResult result) {
            Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport retVal = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).EndGetExpenseReport(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetExpenseReportCompleted(object state) {
            if ((this.GetExpenseReportCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetExpenseReportCompleted(this, new GetExpenseReportCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetExpenseReportAsync(int expenseReportId) {
            this.GetExpenseReportAsync(expenseReportId, null);
        }
        
        public void GetExpenseReportAsync(int expenseReportId, object userState) {
            if ((this.onBeginGetExpenseReportDelegate == null)) {
                this.onBeginGetExpenseReportDelegate = new BeginOperationDelegate(this.OnBeginGetExpenseReport);
            }
            if ((this.onEndGetExpenseReportDelegate == null)) {
                this.onEndGetExpenseReportDelegate = new EndOperationDelegate(this.OnEndGetExpenseReport);
            }
            if ((this.onGetExpenseReportCompletedDelegate == null)) {
                this.onGetExpenseReportCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetExpenseReportCompleted);
            }
            base.InvokeAsync(this.onBeginGetExpenseReportDelegate, new object[] {
                        expenseReportId}, this.onEndGetExpenseReportDelegate, this.onGetExpenseReportCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.BeginGetExpenseReportsForApproval(string employeeAlias, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetExpenseReportsForApproval(employeeAlias, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.EndGetExpenseReportsForApproval(System.IAsyncResult result) {
            return base.Channel.EndGetExpenseReportsForApproval(result);
        }
        
        private System.IAsyncResult OnBeginGetExpenseReportsForApproval(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string employeeAlias = ((string)(inValues[0]));
            return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).BeginGetExpenseReportsForApproval(employeeAlias, callback, asyncState);
        }
        
        private object[] OnEndGetExpenseReportsForApproval(System.IAsyncResult result) {
            Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] retVal = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).EndGetExpenseReportsForApproval(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetExpenseReportsForApprovalCompleted(object state) {
            if ((this.GetExpenseReportsForApprovalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetExpenseReportsForApprovalCompleted(this, new GetExpenseReportsForApprovalCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetExpenseReportsForApprovalAsync(string employeeAlias) {
            this.GetExpenseReportsForApprovalAsync(employeeAlias, null);
        }
        
        public void GetExpenseReportsForApprovalAsync(string employeeAlias, object userState) {
            if ((this.onBeginGetExpenseReportsForApprovalDelegate == null)) {
                this.onBeginGetExpenseReportsForApprovalDelegate = new BeginOperationDelegate(this.OnBeginGetExpenseReportsForApproval);
            }
            if ((this.onEndGetExpenseReportsForApprovalDelegate == null)) {
                this.onEndGetExpenseReportsForApprovalDelegate = new EndOperationDelegate(this.OnEndGetExpenseReportsForApproval);
            }
            if ((this.onGetExpenseReportsForApprovalCompletedDelegate == null)) {
                this.onGetExpenseReportsForApprovalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetExpenseReportsForApprovalCompleted);
            }
            base.InvokeAsync(this.onBeginGetExpenseReportsForApprovalDelegate, new object[] {
                        employeeAlias}, this.onEndGetExpenseReportsForApprovalDelegate, this.onGetExpenseReportsForApprovalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.BeginGetExpenseReports(int employeeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetExpenseReports(employeeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.EndGetExpenseReports(System.IAsyncResult result) {
            return base.Channel.EndGetExpenseReports(result);
        }
        
        private System.IAsyncResult OnBeginGetExpenseReports(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int employeeId = ((int)(inValues[0]));
            return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).BeginGetExpenseReports(employeeId, callback, asyncState);
        }
        
        private object[] OnEndGetExpenseReports(System.IAsyncResult result) {
            Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] retVal = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).EndGetExpenseReports(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetExpenseReportsCompleted(object state) {
            if ((this.GetExpenseReportsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetExpenseReportsCompleted(this, new GetExpenseReportsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetExpenseReportsAsync(int employeeId) {
            this.GetExpenseReportsAsync(employeeId, null);
        }
        
        public void GetExpenseReportsAsync(int employeeId, object userState) {
            if ((this.onBeginGetExpenseReportsDelegate == null)) {
                this.onBeginGetExpenseReportsDelegate = new BeginOperationDelegate(this.OnBeginGetExpenseReports);
            }
            if ((this.onEndGetExpenseReportsDelegate == null)) {
                this.onEndGetExpenseReportsDelegate = new EndOperationDelegate(this.OnEndGetExpenseReports);
            }
            if ((this.onGetExpenseReportsCompletedDelegate == null)) {
                this.onGetExpenseReportsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetExpenseReportsCompleted);
            }
            base.InvokeAsync(this.onBeginGetExpenseReportsDelegate, new object[] {
                        employeeId}, this.onEndGetExpenseReportsDelegate, this.onGetExpenseReportsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.BeginGetExpenseReportsByStatus(int employeeId, Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReportStatus status, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetExpenseReportsByStatus(employeeId, status, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.EndGetExpenseReportsByStatus(System.IAsyncResult result) {
            return base.Channel.EndGetExpenseReportsByStatus(result);
        }
        
        private System.IAsyncResult OnBeginGetExpenseReportsByStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int employeeId = ((int)(inValues[0]));
            Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReportStatus status = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReportStatus)(inValues[1]));
            return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).BeginGetExpenseReportsByStatus(employeeId, status, callback, asyncState);
        }
        
        private object[] OnEndGetExpenseReportsByStatus(System.IAsyncResult result) {
            Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] retVal = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).EndGetExpenseReportsByStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetExpenseReportsByStatusCompleted(object state) {
            if ((this.GetExpenseReportsByStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetExpenseReportsByStatusCompleted(this, new GetExpenseReportsByStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetExpenseReportsByStatusAsync(int employeeId, Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReportStatus status) {
            this.GetExpenseReportsByStatusAsync(employeeId, status, null);
        }
        
        public void GetExpenseReportsByStatusAsync(int employeeId, Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReportStatus status, object userState) {
            if ((this.onBeginGetExpenseReportsByStatusDelegate == null)) {
                this.onBeginGetExpenseReportsByStatusDelegate = new BeginOperationDelegate(this.OnBeginGetExpenseReportsByStatus);
            }
            if ((this.onEndGetExpenseReportsByStatusDelegate == null)) {
                this.onEndGetExpenseReportsByStatusDelegate = new EndOperationDelegate(this.OnEndGetExpenseReportsByStatus);
            }
            if ((this.onGetExpenseReportsByStatusCompletedDelegate == null)) {
                this.onGetExpenseReportsByStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetExpenseReportsByStatusCompleted);
            }
            base.InvokeAsync(this.onBeginGetExpenseReportsByStatusDelegate, new object[] {
                        employeeId,
                        status}, this.onEndGetExpenseReportsByStatusDelegate, this.onGetExpenseReportsByStatusCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.BeginGetCharges(int expenseReportId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCharges(expenseReportId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[] Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.EndGetCharges(System.IAsyncResult result) {
            return base.Channel.EndGetCharges(result);
        }
        
        private System.IAsyncResult OnBeginGetCharges(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int expenseReportId = ((int)(inValues[0]));
            return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).BeginGetCharges(expenseReportId, callback, asyncState);
        }
        
        private object[] OnEndGetCharges(System.IAsyncResult result) {
            Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[] retVal = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).EndGetCharges(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetChargesCompleted(object state) {
            if ((this.GetChargesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetChargesCompleted(this, new GetChargesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetChargesAsync(int expenseReportId) {
            this.GetChargesAsync(expenseReportId, null);
        }
        
        public void GetChargesAsync(int expenseReportId, object userState) {
            if ((this.onBeginGetChargesDelegate == null)) {
                this.onBeginGetChargesDelegate = new BeginOperationDelegate(this.OnBeginGetCharges);
            }
            if ((this.onEndGetChargesDelegate == null)) {
                this.onEndGetChargesDelegate = new EndOperationDelegate(this.OnEndGetCharges);
            }
            if ((this.onGetChargesCompletedDelegate == null)) {
                this.onGetChargesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetChargesCompleted);
            }
            base.InvokeAsync(this.onBeginGetChargesDelegate, new object[] {
                        expenseReportId}, this.onEndGetChargesDelegate, this.onGetChargesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.BeginGetCharge(int chargeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCharge(chargeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.EndGetCharge(System.IAsyncResult result) {
            return base.Channel.EndGetCharge(result);
        }
        
        private System.IAsyncResult OnBeginGetCharge(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int chargeId = ((int)(inValues[0]));
            return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).BeginGetCharge(chargeId, callback, asyncState);
        }
        
        private object[] OnEndGetCharge(System.IAsyncResult result) {
            Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge retVal = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).EndGetCharge(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetChargeCompleted(object state) {
            if ((this.GetChargeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetChargeCompleted(this, new GetChargeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetChargeAsync(int chargeId) {
            this.GetChargeAsync(chargeId, null);
        }
        
        public void GetChargeAsync(int chargeId, object userState) {
            if ((this.onBeginGetChargeDelegate == null)) {
                this.onBeginGetChargeDelegate = new BeginOperationDelegate(this.OnBeginGetCharge);
            }
            if ((this.onEndGetChargeDelegate == null)) {
                this.onEndGetChargeDelegate = new EndOperationDelegate(this.OnEndGetCharge);
            }
            if ((this.onGetChargeCompletedDelegate == null)) {
                this.onGetChargeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetChargeCompleted);
            }
            base.InvokeAsync(this.onBeginGetChargeDelegate, new object[] {
                        chargeId}, this.onEndGetChargeDelegate, this.onGetChargeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.BeginGetOutstandingCharges(int employeeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOutstandingCharges(employeeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[] Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.EndGetOutstandingCharges(System.IAsyncResult result) {
            return base.Channel.EndGetOutstandingCharges(result);
        }
        
        private System.IAsyncResult OnBeginGetOutstandingCharges(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int employeeId = ((int)(inValues[0]));
            return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).BeginGetOutstandingCharges(employeeId, callback, asyncState);
        }
        
        private object[] OnEndGetOutstandingCharges(System.IAsyncResult result) {
            Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[] retVal = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).EndGetOutstandingCharges(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOutstandingChargesCompleted(object state) {
            if ((this.GetOutstandingChargesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOutstandingChargesCompleted(this, new GetOutstandingChargesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOutstandingChargesAsync(int employeeId) {
            this.GetOutstandingChargesAsync(employeeId, null);
        }
        
        public void GetOutstandingChargesAsync(int employeeId, object userState) {
            if ((this.onBeginGetOutstandingChargesDelegate == null)) {
                this.onBeginGetOutstandingChargesDelegate = new BeginOperationDelegate(this.OnBeginGetOutstandingCharges);
            }
            if ((this.onEndGetOutstandingChargesDelegate == null)) {
                this.onEndGetOutstandingChargesDelegate = new EndOperationDelegate(this.OnEndGetOutstandingCharges);
            }
            if ((this.onGetOutstandingChargesCompletedDelegate == null)) {
                this.onGetOutstandingChargesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOutstandingChargesCompleted);
            }
            base.InvokeAsync(this.onBeginGetOutstandingChargesDelegate, new object[] {
                        employeeId}, this.onEndGetOutstandingChargesDelegate, this.onGetOutstandingChargesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.BeginGetAmountOwedToCreditCard(int employeeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAmountOwedToCreditCard(employeeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        decimal Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.EndGetAmountOwedToCreditCard(System.IAsyncResult result) {
            return base.Channel.EndGetAmountOwedToCreditCard(result);
        }
        
        private System.IAsyncResult OnBeginGetAmountOwedToCreditCard(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int employeeId = ((int)(inValues[0]));
            return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).BeginGetAmountOwedToCreditCard(employeeId, callback, asyncState);
        }
        
        private object[] OnEndGetAmountOwedToCreditCard(System.IAsyncResult result) {
            decimal retVal = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).EndGetAmountOwedToCreditCard(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAmountOwedToCreditCardCompleted(object state) {
            if ((this.GetAmountOwedToCreditCardCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAmountOwedToCreditCardCompleted(this, new GetAmountOwedToCreditCardCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAmountOwedToCreditCardAsync(int employeeId) {
            this.GetAmountOwedToCreditCardAsync(employeeId, null);
        }
        
        public void GetAmountOwedToCreditCardAsync(int employeeId, object userState) {
            if ((this.onBeginGetAmountOwedToCreditCardDelegate == null)) {
                this.onBeginGetAmountOwedToCreditCardDelegate = new BeginOperationDelegate(this.OnBeginGetAmountOwedToCreditCard);
            }
            if ((this.onEndGetAmountOwedToCreditCardDelegate == null)) {
                this.onEndGetAmountOwedToCreditCardDelegate = new EndOperationDelegate(this.OnEndGetAmountOwedToCreditCard);
            }
            if ((this.onGetAmountOwedToCreditCardCompletedDelegate == null)) {
                this.onGetAmountOwedToCreditCardCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAmountOwedToCreditCardCompleted);
            }
            base.InvokeAsync(this.onBeginGetAmountOwedToCreditCardDelegate, new object[] {
                        employeeId}, this.onEndGetAmountOwedToCreditCardDelegate, this.onGetAmountOwedToCreditCardCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.BeginGetAmountOwedToEmployee(int employeeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAmountOwedToEmployee(employeeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        decimal Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.EndGetAmountOwedToEmployee(System.IAsyncResult result) {
            return base.Channel.EndGetAmountOwedToEmployee(result);
        }
        
        private System.IAsyncResult OnBeginGetAmountOwedToEmployee(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int employeeId = ((int)(inValues[0]));
            return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).BeginGetAmountOwedToEmployee(employeeId, callback, asyncState);
        }
        
        private object[] OnEndGetAmountOwedToEmployee(System.IAsyncResult result) {
            decimal retVal = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).EndGetAmountOwedToEmployee(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAmountOwedToEmployeeCompleted(object state) {
            if ((this.GetAmountOwedToEmployeeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAmountOwedToEmployeeCompleted(this, new GetAmountOwedToEmployeeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAmountOwedToEmployeeAsync(int employeeId) {
            this.GetAmountOwedToEmployeeAsync(employeeId, null);
        }
        
        public void GetAmountOwedToEmployeeAsync(int employeeId, object userState) {
            if ((this.onBeginGetAmountOwedToEmployeeDelegate == null)) {
                this.onBeginGetAmountOwedToEmployeeDelegate = new BeginOperationDelegate(this.OnBeginGetAmountOwedToEmployee);
            }
            if ((this.onEndGetAmountOwedToEmployeeDelegate == null)) {
                this.onEndGetAmountOwedToEmployeeDelegate = new EndOperationDelegate(this.OnEndGetAmountOwedToEmployee);
            }
            if ((this.onGetAmountOwedToEmployeeCompletedDelegate == null)) {
                this.onGetAmountOwedToEmployeeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAmountOwedToEmployeeCompleted);
            }
            base.InvokeAsync(this.onBeginGetAmountOwedToEmployeeDelegate, new object[] {
                        employeeId}, this.onEndGetAmountOwedToEmployeeDelegate, this.onGetAmountOwedToEmployeeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.BeginSaveCharge(Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge charge, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveCharge(charge, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.EndSaveCharge(System.IAsyncResult result) {
            return base.Channel.EndSaveCharge(result);
        }
        
        private System.IAsyncResult OnBeginSaveCharge(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge charge = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge)(inValues[0]));
            return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).BeginSaveCharge(charge, callback, asyncState);
        }
        
        private object[] OnEndSaveCharge(System.IAsyncResult result) {
            int retVal = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).EndSaveCharge(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveChargeCompleted(object state) {
            if ((this.SaveChargeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveChargeCompleted(this, new SaveChargeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveChargeAsync(Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge charge) {
            this.SaveChargeAsync(charge, null);
        }
        
        public void SaveChargeAsync(Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge charge, object userState) {
            if ((this.onBeginSaveChargeDelegate == null)) {
                this.onBeginSaveChargeDelegate = new BeginOperationDelegate(this.OnBeginSaveCharge);
            }
            if ((this.onEndSaveChargeDelegate == null)) {
                this.onEndSaveChargeDelegate = new EndOperationDelegate(this.OnEndSaveCharge);
            }
            if ((this.onSaveChargeCompletedDelegate == null)) {
                this.onSaveChargeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveChargeCompleted);
            }
            base.InvokeAsync(this.onBeginSaveChargeDelegate, new object[] {
                        charge}, this.onEndSaveChargeDelegate, this.onSaveChargeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.BeginDeleteCharge(int chargeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCharge(chargeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.EndDeleteCharge(System.IAsyncResult result) {
            base.Channel.EndDeleteCharge(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCharge(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int chargeId = ((int)(inValues[0]));
            return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).BeginDeleteCharge(chargeId, callback, asyncState);
        }
        
        private object[] OnEndDeleteCharge(System.IAsyncResult result) {
            ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).EndDeleteCharge(result);
            return null;
        }
        
        private void OnDeleteChargeCompleted(object state) {
            if ((this.DeleteChargeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteChargeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteChargeAsync(int chargeId) {
            this.DeleteChargeAsync(chargeId, null);
        }
        
        public void DeleteChargeAsync(int chargeId, object userState) {
            if ((this.onBeginDeleteChargeDelegate == null)) {
                this.onBeginDeleteChargeDelegate = new BeginOperationDelegate(this.OnBeginDeleteCharge);
            }
            if ((this.onEndDeleteChargeDelegate == null)) {
                this.onEndDeleteChargeDelegate = new EndOperationDelegate(this.OnEndDeleteCharge);
            }
            if ((this.onDeleteChargeCompletedDelegate == null)) {
                this.onDeleteChargeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteChargeCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteChargeDelegate, new object[] {
                        chargeId}, this.onEndDeleteChargeDelegate, this.onDeleteChargeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.BeginSaveExpenseReport(Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport expenseReport, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveExpenseReport(expenseReport, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.EndSaveExpenseReport(System.IAsyncResult result) {
            return base.Channel.EndSaveExpenseReport(result);
        }
        
        private System.IAsyncResult OnBeginSaveExpenseReport(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport expenseReport = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport)(inValues[0]));
            return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).BeginSaveExpenseReport(expenseReport, callback, asyncState);
        }
        
        private object[] OnEndSaveExpenseReport(System.IAsyncResult result) {
            int retVal = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).EndSaveExpenseReport(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveExpenseReportCompleted(object state) {
            if ((this.SaveExpenseReportCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveExpenseReportCompleted(this, new SaveExpenseReportCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveExpenseReportAsync(Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport expenseReport) {
            this.SaveExpenseReportAsync(expenseReport, null);
        }
        
        public void SaveExpenseReportAsync(Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport expenseReport, object userState) {
            if ((this.onBeginSaveExpenseReportDelegate == null)) {
                this.onBeginSaveExpenseReportDelegate = new BeginOperationDelegate(this.OnBeginSaveExpenseReport);
            }
            if ((this.onEndSaveExpenseReportDelegate == null)) {
                this.onEndSaveExpenseReportDelegate = new EndOperationDelegate(this.OnEndSaveExpenseReport);
            }
            if ((this.onSaveExpenseReportCompletedDelegate == null)) {
                this.onSaveExpenseReportCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveExpenseReportCompleted);
            }
            base.InvokeAsync(this.onBeginSaveExpenseReportDelegate, new object[] {
                        expenseReport}, this.onEndSaveExpenseReportDelegate, this.onSaveExpenseReportCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.BeginDeleteExpenseReport(int expenseReportId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteExpenseReport(expenseReportId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.EndDeleteExpenseReport(System.IAsyncResult result) {
            base.Channel.EndDeleteExpenseReport(result);
        }
        
        private System.IAsyncResult OnBeginDeleteExpenseReport(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int expenseReportId = ((int)(inValues[0]));
            return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).BeginDeleteExpenseReport(expenseReportId, callback, asyncState);
        }
        
        private object[] OnEndDeleteExpenseReport(System.IAsyncResult result) {
            ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).EndDeleteExpenseReport(result);
            return null;
        }
        
        private void OnDeleteExpenseReportCompleted(object state) {
            if ((this.DeleteExpenseReportCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteExpenseReportCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteExpenseReportAsync(int expenseReportId) {
            this.DeleteExpenseReportAsync(expenseReportId, null);
        }
        
        public void DeleteExpenseReportAsync(int expenseReportId, object userState) {
            if ((this.onBeginDeleteExpenseReportDelegate == null)) {
                this.onBeginDeleteExpenseReportDelegate = new BeginOperationDelegate(this.OnBeginDeleteExpenseReport);
            }
            if ((this.onEndDeleteExpenseReportDelegate == null)) {
                this.onEndDeleteExpenseReportDelegate = new EndOperationDelegate(this.OnEndDeleteExpenseReport);
            }
            if ((this.onDeleteExpenseReportCompletedDelegate == null)) {
                this.onDeleteExpenseReportCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteExpenseReportCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteExpenseReportDelegate, new object[] {
                        expenseReportId}, this.onEndDeleteExpenseReportDelegate, this.onDeleteExpenseReportCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.BeginResetData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResetData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService.EndResetData(System.IAsyncResult result) {
            base.Channel.EndResetData(result);
        }
        
        private System.IAsyncResult OnBeginResetData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).BeginResetData(callback, asyncState);
        }
        
        private object[] OnEndResetData(System.IAsyncResult result) {
            ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService)(this)).EndResetData(result);
            return null;
        }
        
        private void OnResetDataCompleted(object state) {
            if ((this.ResetDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetDataAsync() {
            this.ResetDataAsync(null);
        }
        
        public void ResetDataAsync(object userState) {
            if ((this.onBeginResetDataDelegate == null)) {
                this.onBeginResetDataDelegate = new BeginOperationDelegate(this.OnBeginResetData);
            }
            if ((this.onEndResetDataDelegate == null)) {
                this.onEndResetDataDelegate = new EndOperationDelegate(this.OnEndResetData);
            }
            if ((this.onResetDataCompletedDelegate == null)) {
                this.onResetDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetDataCompleted);
            }
            base.InvokeAsync(this.onBeginResetDataDelegate, null, this.onEndResetDataDelegate, this.onResetDataCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService CreateChannel() {
            return new ExpenseServiceClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IExpenseService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IExpenseService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:83/ExpenseService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ExpenseServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IExpenseService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ExpenseServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IExpenseService);
        }
        
        private class ExpenseServiceClientChannel : ChannelBase<Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService>, Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService {
            
            public ExpenseServiceClientChannel(System.ServiceModel.ClientBase<Expenses.ExpenseRepository.WcfClient.WcfExpenseService.IExpenseService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetEmployee(string employeeAlias, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = employeeAlias;
                System.IAsyncResult _result = base.BeginInvoke("GetEmployee", _args, callback, asyncState);
                return _result;
            }
            
            public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Employee EndGetEmployee(System.IAsyncResult result) {
                object[] _args = new object[0];
                Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Employee _result = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Employee)(base.EndInvoke("GetEmployee", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveEmployee(Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Employee employee, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = employee;
                System.IAsyncResult _result = base.BeginInvoke("SaveEmployee", _args, callback, asyncState);
                return _result;
            }
            
            public int EndSaveEmployee(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("SaveEmployee", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSummaryItems(int employeeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = employeeId;
                System.IAsyncResult _result = base.BeginInvoke("GetSummaryItems", _args, callback, asyncState);
                return _result;
            }
            
            public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.SummaryItem[] EndGetSummaryItems(System.IAsyncResult result) {
                object[] _args = new object[0];
                Expenses.ExpenseRepository.WcfClient.WcfExpenseService.SummaryItem[] _result = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.SummaryItem[])(base.EndInvoke("GetSummaryItems", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetExpenseReport(int expenseReportId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = expenseReportId;
                System.IAsyncResult _result = base.BeginInvoke("GetExpenseReport", _args, callback, asyncState);
                return _result;
            }
            
            public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport EndGetExpenseReport(System.IAsyncResult result) {
                object[] _args = new object[0];
                Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport _result = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport)(base.EndInvoke("GetExpenseReport", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetExpenseReportsForApproval(string employeeAlias, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = employeeAlias;
                System.IAsyncResult _result = base.BeginInvoke("GetExpenseReportsForApproval", _args, callback, asyncState);
                return _result;
            }
            
            public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] EndGetExpenseReportsForApproval(System.IAsyncResult result) {
                object[] _args = new object[0];
                Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] _result = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[])(base.EndInvoke("GetExpenseReportsForApproval", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetExpenseReports(int employeeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = employeeId;
                System.IAsyncResult _result = base.BeginInvoke("GetExpenseReports", _args, callback, asyncState);
                return _result;
            }
            
            public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] EndGetExpenseReports(System.IAsyncResult result) {
                object[] _args = new object[0];
                Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] _result = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[])(base.EndInvoke("GetExpenseReports", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetExpenseReportsByStatus(int employeeId, Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReportStatus status, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = employeeId;
                _args[1] = status;
                System.IAsyncResult _result = base.BeginInvoke("GetExpenseReportsByStatus", _args, callback, asyncState);
                return _result;
            }
            
            public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] EndGetExpenseReportsByStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[] _result = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport[])(base.EndInvoke("GetExpenseReportsByStatus", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCharges(int expenseReportId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = expenseReportId;
                System.IAsyncResult _result = base.BeginInvoke("GetCharges", _args, callback, asyncState);
                return _result;
            }
            
            public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[] EndGetCharges(System.IAsyncResult result) {
                object[] _args = new object[0];
                Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[] _result = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[])(base.EndInvoke("GetCharges", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCharge(int chargeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = chargeId;
                System.IAsyncResult _result = base.BeginInvoke("GetCharge", _args, callback, asyncState);
                return _result;
            }
            
            public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge EndGetCharge(System.IAsyncResult result) {
                object[] _args = new object[0];
                Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge _result = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge)(base.EndInvoke("GetCharge", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOutstandingCharges(int employeeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = employeeId;
                System.IAsyncResult _result = base.BeginInvoke("GetOutstandingCharges", _args, callback, asyncState);
                return _result;
            }
            
            public Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[] EndGetOutstandingCharges(System.IAsyncResult result) {
                object[] _args = new object[0];
                Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[] _result = ((Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge[])(base.EndInvoke("GetOutstandingCharges", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAmountOwedToCreditCard(int employeeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = employeeId;
                System.IAsyncResult _result = base.BeginInvoke("GetAmountOwedToCreditCard", _args, callback, asyncState);
                return _result;
            }
            
            public decimal EndGetAmountOwedToCreditCard(System.IAsyncResult result) {
                object[] _args = new object[0];
                decimal _result = ((decimal)(base.EndInvoke("GetAmountOwedToCreditCard", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAmountOwedToEmployee(int employeeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = employeeId;
                System.IAsyncResult _result = base.BeginInvoke("GetAmountOwedToEmployee", _args, callback, asyncState);
                return _result;
            }
            
            public decimal EndGetAmountOwedToEmployee(System.IAsyncResult result) {
                object[] _args = new object[0];
                decimal _result = ((decimal)(base.EndInvoke("GetAmountOwedToEmployee", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveCharge(Expenses.ExpenseRepository.WcfClient.WcfExpenseService.Charge charge, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = charge;
                System.IAsyncResult _result = base.BeginInvoke("SaveCharge", _args, callback, asyncState);
                return _result;
            }
            
            public int EndSaveCharge(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("SaveCharge", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteCharge(int chargeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = chargeId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteCharge", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteCharge(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteCharge", _args, result);
            }
            
            public System.IAsyncResult BeginSaveExpenseReport(Expenses.ExpenseRepository.WcfClient.WcfExpenseService.ExpenseReport expenseReport, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = expenseReport;
                System.IAsyncResult _result = base.BeginInvoke("SaveExpenseReport", _args, callback, asyncState);
                return _result;
            }
            
            public int EndSaveExpenseReport(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("SaveExpenseReport", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteExpenseReport(int expenseReportId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = expenseReportId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteExpenseReport", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteExpenseReport(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteExpenseReport", _args, result);
            }
            
            public System.IAsyncResult BeginResetData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ResetData", _args, callback, asyncState);
                return _result;
            }
            
            public void EndResetData(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ResetData", _args, result);
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IExpenseService,
        }
    }
}
